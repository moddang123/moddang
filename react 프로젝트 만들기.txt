React 프로젝트

1. 작업 환경 준비하기
	1) yarn create react-app [폴더명]
	
	2) 설정 파일 만들기
		- .Prettier : 코드 스타일을 정리해 줌 / 최상위 디렉터리에다 설정
		{
			"singleQuote" : true,
			"semi" : true,
			"useTabs" : false,
			"tabWidth" : 2,
			"trailingComma" : "all",
			"printWidth" : 80
		}
		
	3) 라우터(Router) 적용
		* 리액트 라우터란 SPA의 라우팅 문제를 해결하기 위해서 거의 표준처럼 사용되고 있는 네비게이션 라이브러리 (라우팅routing : 어떤 네트워크 안에서 통신 데이터를 보낼 최적의 경로를 선택하는 과정을 뜻함)
		- yarn add react-router-dom
		- 라우터와 관련된 컴포넌트는 src/pages 디렉터리에서 만들면 된다. -> Route 를 통해 조건에 따라 원하는 결과를 보여주도록 설정
		
		-> 우리가 만들 컴포넌트 : 로그인 / 회원가입 / 글쓰기 / 포스트 읽기 / 포스트 목록
		
		- src/index.js
			import {BrowserRouter} from 'react-router-dom';
			
			ReactDOM.render(
				<BrowserRouter>
					<App />
				</BrowserRouter>,
				document.getElementById('root'),
			);
			
			serviceWorker.unregister();
		
		- src/App.js
			import {Route} from 'react-router-dom';
			import [pages/파일명] from './pages/[해당파일];
			.
			.
			.
			
			{
				return (
					<>
						<Route component={PostListPage} path={['/@:username', '/']} exact /> /*exact는 home에만 적용*/
						
						path={['/@:username', '/']} - path에 배열을 넣어주면 한 라우터에 여러 개의 경로를 쉽게 설정이 가능
													  '/@:username'	은 http://localhost:3000/@jung 같은 경로에서 jung을 username파라미터로 읽을 수 있게 해줌
								
					
						<Route component={LoginPage} path={'/login'} />
					</>
				);
			}
		
		(*참고*
			import {Link} from 'react-router-dom';
			**디렉토리 생성**
				`src/components: 컴포넌트들이 위치하는 디렉토리입니다. / 어떤 주소로 왔을 때 무엇을 보여줄 지, 나중에 여기서 정의
				`src/pages: 각 라우트들이 위치하는 디렉토리 입니다.
				`src/client: 브라우저 측에서 사용할 최상위 컴포넌트 입니다. 우리가 추후 서버사이드 렌더링을 구현 할 것이기 때문에 디렉토리를 따로 구분하였습니다. (서버사이드 렌더링을 할 때에는 서버 전용 라우터를 써야합니다.) 여기서 라우터를 설정합니다.
				`src/server: 서버측에서 사용 할 리액트 관련 코드를 여기에 넣습니다.
				`src/shared: 서버와 클라이언트에서 공용으로 사용되는 컴포넌트 App.js 가 여기에 위치합니다.
				`src/lib: 나중에 웹 연동을 구현 할 때 사용 할 API와 코드스플리팅 할 때 필요한 코드가 여기에 위치합니다.
		
		*참고*
			**라우트 파라미터 읽기**
				라우트의 경로에 특정 값을 넣는 방법을 알아보겠습니다. 방법은 두가지가 있는데요, params 를 사용하는 것 과, query 를 사용하는 것 입니다.

				라우트로 설정한 컴포넌트는, 3가지의 props 를 전달받게 됩니다:

				① history 이 객체를 통해 push, replace 를 통해 다른 경로로 이동하거나 앞 뒤 페이지로 전환 할 수 있습니다.
				② location 이 객체는 현재 경로에 대한 정보를 지니고 있고 URL 쿼리 (/about?foo=bar 형식) 정보도 가지고있습니다.
				③ match 이 객체에는 어떤 라우트에 매칭이 되었는지에 대한 정보가 있고 params (/about/:name 형식) 정보를 가지고있습니다.
		)
			

		4) 스타일 설정
			yarn add styled-components
			- 사용법
			① import styled from 'styled-components';
			② const Name = styled.div``;
			③ 
				return (
					<Name>
						<div>
							.....
						</div>
					</Name>
				);
				
			④ .css 파일을 불러올 때 - import './index.css';
			
			
		5) 공통(Button) 컴포넌트 만들기 - 다양한 곳에서 재사용
			- src / components / common 디렉터리 생성 후 파일 생성(ex. button.js)
		
		6) 리덕스(Redux) 적용
			- 리덕스 이해하기 https://velopert.com/3528  / 간략하게 말하자면 상태관리를 더 쉽게 하기 위함
			- 추후 비동기 작업을 관리하는 과정에서 redux-saga 사용 (미들웨어)
			- 리덕스 스토어 생성, Provider컴포넌트를 통해 프로젝트에 리덕스를 적용 시키기
			
			- yarn add redux react-redux redux-actions immer redux-devtools-extension
			
			- 리덕스 모듈 만들기 -> 액션 타입, 액션 생성 함수, 리듀서가 하나의 파일에 다 정의되어 있는 것을 뜻함
			- src/modules 디렉터리 생성 후 파일 생성
			
			- auth.js 파일 생성했다고 예를 들면,
			
				import { createAction, handleActions } from 'redux-actions';
				
				const SAMPLE_ACTION = 'auth/SAMPLE_ACTION'; 액션 타입 정의
				
				export const sampleAction = createAction(SAMPLE_ACTION); 액션 생성 함수
				
				const initialState = {};
				
				const auth = handleActions(
					{
						[SAMPLE_ACTION] : (state, action) => state,
					},
					initialState
				);
				
			- 리듀서 만들기
				1) src / modules / index.js 파일 생성
				2)
					import { combineReducers } from 'redux';
					import 액션 타입 파일 불러오기;
					
					const rootReducer = combineReducers({
						auth,
						.
						.
					});
					
					export default rootReducer;
					
				3) src/index.js 목록 추가하기
					import {Provider} from 'react-reudx';
					import {createStore} from 'redux';
					import {composeWithDevTools} from 'redux-devtools-extension';
					import rootReducer from './modules';
					
					const store = createStore(rootReducer, composeWithDevTools());
					
					ReactDOM.render(
						<Provider store={store}>
							<BrowerRouter>
								<App />
							</<BrowerRouter>
						</Provider>,
						getElementById('root');
					);
					
----------------------------------------------------------------------------------------------------------------------------------------

2. 회원가입 & 로그인 구현
	
	순서) UI 개발 -> 리덕스 통한 상태 관리 및 API 요청 구현
	
	1) UI 준비하기 - 컴포넌트 폴더에 기능별로 디렉터리 생성
		auth 폴더 - 회원 인증 관련된 컴포넌트
		wirte 폴더 - 그 외
		
	컴포넌트는 페이지에 있는 파일에서 사용
	
	2) 리덕스 폼 상태 관리하기
		- containers 디렉터리 생성 (container는 앱의 상태를 관리하기 때문에 앱의 상태가 자주 바뀔수록 그에 따라 빈번하게 업데이트가 일어난다.)
		
		- useState, useEffect, useDispatch, useSelector 함수를 사용하여 컴포넌트를 리덕스와 연동 시킴
			import React, { useState, useEffect,.. } from 'react';
			import { useDispatch, useSelector } from 'react-reudx';
		
		
	
	
	
	
	*참고*
		**immer 사용하기**
		
		- import produce from 'immer';
		
		- produce 함수를 사용할 때 
			첫번째 파라미터에는 수정하고 싶은 상태, 두번째 파라미터는 어떻게 업데이트하고 싶을지 정의하는 함수를 넣어준다.
			
			ex)
			
			const nextState = produce(state, draft => {
				drfat.number += 1 ;
			});
		
	
----------------------------------------------------------------------------------------------------------------------------------------

3. API 연동하기
	1) 
		yarn add aixos redux-saga
		import axios from 'axios';
	
	2) 프록시(proxy) 설정
		- 백엔드 서버는 4000포트, 리액트 개발 서버는 3000포트 -> api를 호출하면 주소가 다르기 때문에 CORS 라는 오류가 발생한다.
		- 프록시 기능을 사용하여 개발 서버로 요청하는 API들을 우리가 프록시로 정해 둔 서버로 그대로 전달해 주고 그 응답을 웹 애플리케이션에서 사용할 수 있게 해줌
		- package.js에서 다음과 같이 추가 해준다.
			"proxy": "http://localhost:4000/"
			
	3) API 함수 작성
		
		
	4) auth 리덕스 모듈에서 API 사용하기**

	
	
	
				