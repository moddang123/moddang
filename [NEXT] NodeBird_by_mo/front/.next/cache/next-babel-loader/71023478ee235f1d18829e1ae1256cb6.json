{"ast":null,"code":"import { all } from 'redux-saga/effects';\nimport { LOG_OUT, LOG_IN_SUCCESS, LOG_IN_FAIURE } from '../reducers/user';\n\nfunction* loginAPI() {}\n\nfunction* login() {\n  try {\n    yield delay(4);\n    yield put({\n      //put은 dispatch와 동일\n      type: LOG_IN_SUCCESS\n    });\n  } catch (e) {\n    //loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAIURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOG_IN, login);\n}\n\nfunction* helloSaga() {\n  console.log('hello saga');\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin)]);\n}\n;","map":{"version":3,"sources":["D:/IMYME_STUDY/NodeBird_by_mo/front/sagas/user.js"],"names":["all","LOG_OUT","LOG_IN_SUCCESS","LOG_IN_FAIURE","loginAPI","login","delay","put","type","e","console","error","watchLogin","takeLatest","LOG_IN","helloSaga","log","userSaga","fork"],"mappings":"AAAA,SAASA,GAAT,QAAoB,oBAApB;AACA,SAASC,OAAT,EAAkBC,cAAlB,EAAkCC,aAAlC,QAAuD,kBAAvD;;AAEA,UAAUC,QAAV,GAAqB,CAEpB;;AAED,UAAUC,KAAV,GAAkB;AACd,MAAG;AACC,UAAMC,KAAK,CAAC,CAAD,CAAX;AACA,UAAMC,GAAG,CAAC;AAAC;AACPC,MAAAA,IAAI,EAAEN;AADA,KAAD,CAAT;AAGH,GALD,CAKE,OAAOO,CAAP,EAAU;AAAC;AACTC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMF,GAAG,CAAC;AACNC,MAAAA,IAAI,EAAEL;AADA,KAAD,CAAT;AAGH;AACJ;;AAED,UAAUS,UAAV,GAAuB;AACnB,QAAMC,UAAU,CAACC,MAAD,EAAST,KAAT,CAAhB;AACH;;AAED,UAAUU,SAAV,GAAsB;AAClBL,EAAAA,OAAO,CAACM,GAAR,CAAY,YAAZ;AACH;;AAED,eAAe,UAAUC,QAAV,GAAqB;AAChC,QAAMjB,GAAG,CAAC,CACNkB,IAAI,CAACN,UAAD,CADE,CAAD,CAAT;AAGH;AAAA","sourcesContent":["import { all } from 'redux-saga/effects';\r\nimport { LOG_OUT, LOG_IN_SUCCESS, LOG_IN_FAIURE } from '../reducers/user';\r\n\r\nfunction* loginAPI() {\r\n    \r\n}\r\n\r\nfunction* login() {\r\n    try{\r\n        yield delay(4);\r\n        yield put({//put은 dispatch와 동일\r\n            type: LOG_IN_SUCCESS\r\n        });\r\n    } catch (e) {//loginAPI 실패\r\n        console.error(e);\r\n        yield put({ \r\n            type: LOG_IN_FAIURE,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLogin() {\r\n    yield takeLatest(LOG_IN, login)\r\n}\r\n\r\nfunction* helloSaga() {\r\n    console.log('hello saga');\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogin),\r\n    ]);\r\n};"]},"metadata":{},"sourceType":"module"}