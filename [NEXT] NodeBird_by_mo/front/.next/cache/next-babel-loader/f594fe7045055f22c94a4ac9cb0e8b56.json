{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loginAPI),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(login),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogin),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSaga);\n\nimport { all } from 'redux-saga/effects';\nimport { LOG_OUT, LOG_IN_SUCCESS, LOG_IN_FAIURE } from '../reducers/user';\n\nfunction loginAPI() {\n  return _regeneratorRuntime.wrap(function loginAPI$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction login() {\n  return _regeneratorRuntime.wrap(function login$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(loginAPI);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            //put은 dispatch와 동일\n            type: LOG_IN_SUCCESS\n          });\n\n        case 5:\n          _context2.next = 12;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          //loginAPI 실패\n          console.error(_context2.t0);\n          _context2.next = 12;\n          return put({\n            type: LOG_IN_FAIURE\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(LOG_IN, login);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return all([fork(watchLogin)]);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n;","map":{"version":3,"sources":["D:/IMYME_STUDY/NodeBird_by_mo/front/sagas/user.js"],"names":["loginAPI","login","watchLogin","userSaga","all","LOG_OUT","LOG_IN_SUCCESS","LOG_IN_FAIURE","call","put","type","console","error","takeLatest","LOG_IN","fork"],"mappings":";;;;yBAGUA,Q;;;yBAIAC,K;;;yBAcAC,U;;;yBAIeC,Q;;AAzBzB,SAASC,GAAT,QAAoB,oBAApB;AACA,SAASC,OAAT,EAAkBC,cAAlB,EAAkCC,aAAlC,QAAuD,kBAAvD;;AAEA,SAAUP,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMO,IAAI,CAACR,QAAD,CAAV;;AAFR;AAAA;AAGQ,iBAAMS,GAAG,CAAC;AAAC;AACPC,YAAAA,IAAI,EAAEJ;AADA,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAMiB;AACTK,UAAAA,OAAO,CAACC,KAAR;AAPR;AAQQ,iBAAMH,GAAG,CAAC;AACNC,YAAAA,IAAI,EAAEH;AADA,WAAD,CAAT;;AARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcA,SAAUL,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMW,UAAU,CAACC,MAAD,EAASb,KAAT,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNW,IAAI,CAACb,UAAD,CADE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAId","sourcesContent":["import { all } from 'redux-saga/effects';\r\nimport { LOG_OUT, LOG_IN_SUCCESS, LOG_IN_FAIURE } from '../reducers/user';\r\n\r\nfunction* loginAPI() {\r\n    \r\n}\r\n\r\nfunction* login() {\r\n    try{\r\n        yield call(loginAPI);\r\n        yield put({//put은 dispatch와 동일\r\n            type: LOG_IN_SUCCESS\r\n        });\r\n    } catch (e) {//loginAPI 실패\r\n        console.error(e);\r\n        yield put({ \r\n            type: LOG_IN_FAIURE,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLogin() {\r\n    yield takeLatest(LOG_IN, login)\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogin),\r\n    ]);\r\n};"]},"metadata":{},"sourceType":"module"}