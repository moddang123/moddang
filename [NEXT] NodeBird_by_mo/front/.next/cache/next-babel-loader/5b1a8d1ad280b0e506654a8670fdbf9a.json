{"ast":null,"code":"import { all, fork, takeLatest, takeEvery, call, put, take, delay } from 'redux-saga/effects';\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAIURE } from '../reducers/user';\nconst HELLO_SAGA = 'HELLO_SAGA';\n\nfunction* loginAPI() {//서버에 요청을 보내는 부분\n}\n\nfunction* login() {\n  try {\n    yield put({\n      //put은 dispatch와 동일\n      type: LOG_IN_SUCCESS\n    });\n  } catch (e) {\n    //loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAIURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeEvery(LOG_IN, login);\n}\n\n;\n\nfunction* watchHello() {\n  yield takeLatest(HELLO_SAGA, function* () {\n    yield delay(1000);\n    yield put({\n      type: 'BYE_SAGA'\n    });\n  });\n} // function* watchHello() {\n//     while (true) {\n//         yield take(HELLO_SAGA);\n//         console.log(1);\n//         console.log(11);\n//         console.log(111);\n//         console.log(1111);\n//         console.log(11111);\n//     }\n// }\n\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchHello)]);\n}\n;","map":{"version":3,"sources":["D:/IMYME_STUDY/NodeBird_by_mo/front/sagas/user.js"],"names":["all","fork","takeLatest","takeEvery","call","put","take","delay","LOG_IN","LOG_IN_SUCCESS","LOG_IN_FAIURE","HELLO_SAGA","loginAPI","login","type","e","console","error","watchLogin","watchHello","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,SAAhC,EAA2CC,IAA3C,EAAiDC,GAAjD,EAAsDC,IAAtD,EAA4DC,KAA5D,QAAyE,oBAAzE;AACA,SAASC,MAAT,EAAiBC,cAAjB,EAAiCC,aAAjC,QAAsD,kBAAtD;AAEA,MAAMC,UAAU,GAAG,YAAnB;;AAEA,UAAUC,QAAV,GAAqB,CACjB;AACH;;AAED,UAAUC,KAAV,GAAkB;AACd,MAAG;AACC,UAAMR,GAAG,CAAC;AAAC;AACPS,MAAAA,IAAI,EAAEL;AADA,KAAD,CAAT;AAGH,GAJD,CAIE,OAAOM,CAAP,EAAU;AAAC;AACTC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMV,GAAG,CAAC;AACNS,MAAAA,IAAI,EAAEJ;AADA,KAAD,CAAT;AAGH;AACJ;;AAED,UAAUQ,UAAV,GAAuB;AACnB,QAAMf,SAAS,CAACK,MAAD,EAASK,KAAT,CAAf;AACH;;AAAA;;AAED,UAAUM,UAAV,GAAuB;AACnB,QAAMjB,UAAU,CAACS,UAAD,EAAa,aAAY;AACrC,UAAMJ,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACNS,MAAAA,IAAI,EAAE;AADA,KAAD,CAAT;AAGH,GALe,CAAhB;AAMH,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAe,UAAUM,QAAV,GAAqB;AAChC,QAAMpB,GAAG,CAAC,CACNC,IAAI,CAACiB,UAAD,CADE,EAENjB,IAAI,CAACkB,UAAD,CAFE,CAAD,CAAT;AAIH;AAAA","sourcesContent":["import { all, fork, takeLatest, takeEvery, call, put, take, delay } from 'redux-saga/effects';\r\nimport { LOG_IN, LOG_IN_SUCCESS, LOG_IN_FAIURE } from '../reducers/user';\r\n\r\nconst HELLO_SAGA = 'HELLO_SAGA';\r\n\r\nfunction* loginAPI() {\r\n    //서버에 요청을 보내는 부분\r\n}\r\n\r\nfunction* login() {\r\n    try{\r\n        yield put({//put은 dispatch와 동일\r\n            type: LOG_IN_SUCCESS\r\n        });\r\n    } catch (e) {//loginAPI 실패\r\n        console.error(e);\r\n        yield put({ \r\n            type: LOG_IN_FAIURE,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLogin() {\r\n    yield takeEvery(LOG_IN, login);\r\n};\r\n\r\nfunction* watchHello() {\r\n    yield takeLatest(HELLO_SAGA, function*() {\r\n        yield delay(1000);\r\n        yield put({\r\n            type: 'BYE_SAGA',\r\n        });\r\n    });\r\n}\r\n\r\n// function* watchHello() {\r\n//     while (true) {\r\n//         yield take(HELLO_SAGA);\r\n//         console.log(1);\r\n//         console.log(11);\r\n//         console.log(111);\r\n//         console.log(1111);\r\n//         console.log(11111);\r\n//     }\r\n// }\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogin),\r\n        fork(watchHello),\r\n    ]);\r\n};"]},"metadata":{},"sourceType":"module"}