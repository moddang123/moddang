{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loginAPI),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(login),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogin),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(helloSaga),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSaga);\n\nimport { all, fork, akeLatest, call, put, take } from 'redux-saga/effects';\nimport { LOG_OUT, LOG_IN_SUCCESS, LOG_IN_FAIURE } from '../reducers/user';\nvar HELLO_SAGA = 'HELLO_SAGA';\n\nfunction loginAPI() {\n  return _regeneratorRuntime.wrap(function loginAPI$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction login() {\n  return _regeneratorRuntime.wrap(function login$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return delay(4);\n\n        case 3:\n          _context2.next = 5;\n          return put({\n            //put은 dispatch와 동일\n            type: LOG_IN_SUCCESS\n          });\n\n        case 5:\n          _context2.next = 12;\n          break;\n\n        case 7:\n          _context2.prev = 7;\n          _context2.t0 = _context2[\"catch\"](0);\n          //loginAPI 실패\n          console.error(_context2.t0);\n          _context2.next = 12;\n          return put({\n            type: LOG_IN_FAIURE\n          });\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 7]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(LOG_IN, login);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\n;\n\nfunction helloSaga() {\n  return _regeneratorRuntime.wrap(function helloSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          if (!true) {\n            _context4.next = 6;\n            break;\n          }\n\n          _context4.next = 3;\n          return take(HELLO_SAGA);\n\n        case 3:\n          console.log('hello saga'); //비동기 요청, 타이머 넣어도 됨\n\n          _context4.next = 0;\n          break;\n\n        case 6:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\n;\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return [watchHello(), watchLogin(), watchSignUp()];\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n;","map":{"version":3,"sources":["D:/IMYME_STUDY/NodeBird_by_mo/front/sagas/user.js"],"names":["loginAPI","login","watchLogin","helloSaga","userSaga","all","fork","akeLatest","call","put","take","LOG_OUT","LOG_IN_SUCCESS","LOG_IN_FAIURE","HELLO_SAGA","delay","type","console","error","takeLatest","LOG_IN","log","watchHello","watchSignUp"],"mappings":";;;;yBAKUA,Q;;;yBAIAC,K;;;yBAcAC,U;;;yBAIAC,S;;;yBAQeC,Q;;AAnCzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,SAApB,EAA+BC,IAA/B,EAAqCC,GAArC,EAA0CC,IAA1C,QAAsD,oBAAtD;AACA,SAASC,OAAT,EAAkBC,cAAlB,EAAkCC,aAAlC,QAAuD,kBAAvD;AAEA,IAAMC,UAAU,GAAG,YAAnB;;AAEA,SAAUd,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ,iBAAMc,KAAK,CAAC,CAAD,CAAX;;AAFR;AAAA;AAGQ,iBAAMN,GAAG,CAAC;AAAC;AACPO,YAAAA,IAAI,EAAEJ;AADA,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAMiB;AACTK,UAAAA,OAAO,CAACC,KAAR;AAPR;AAQQ,iBAAMT,GAAG,CAAC;AACNO,YAAAA,IAAI,EAAEH;AADA,WAAD,CAAT;;AARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcA,SAAUX,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMiB,UAAU,CAACC,MAAD,EAASnB,KAAT,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEC;;AAED,SAAUE,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA,eACW,IADX;AAAA;AAAA;AAAA;;AAAA;AAEQ,iBAAMO,IAAI,CAACI,UAAD,CAAV;;AAFR;AAGQG,UAAAA,OAAO,CAACI,GAAR,CAAY,YAAZ,EAHR,CAIQ;;AAJR;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMC;AAED,eAAe,SAAUjB,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAM,CACFkB,UAAU,EADR,EAEFpB,UAAU,EAFR,EAGFqB,WAAW,EAHT,CAAN;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMd","sourcesContent":["import { all, fork, akeLatest, call, put, take } from 'redux-saga/effects';\r\nimport { LOG_OUT, LOG_IN_SUCCESS, LOG_IN_FAIURE } from '../reducers/user';\r\n\r\nconst HELLO_SAGA = 'HELLO_SAGA';\r\n\r\nfunction* loginAPI() {\r\n    //서버에 요청을 보내는 부분\r\n}\r\n\r\nfunction* login() {\r\n    try{\r\n        yield delay(4);\r\n        yield put({//put은 dispatch와 동일\r\n            type: LOG_IN_SUCCESS\r\n        });\r\n    } catch (e) {//loginAPI 실패\r\n        console.error(e);\r\n        yield put({ \r\n            type: LOG_IN_FAIURE,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLogin() {\r\n    yield takeLatest(LOG_IN, login)\r\n};\r\n\r\nfunction* helloSaga() {\r\n    while (true) {\r\n        yield take(HELLO_SAGA);\r\n        console.log('hello saga');\r\n        //비동기 요청, 타이머 넣어도 됨\r\n    }\r\n};\r\n\r\nexport default function* userSaga() {\r\n    yield [\r\n        watchHello(),\r\n        watchLogin(),\r\n        watchSignUp(),\r\n    ]\r\n};"]},"metadata":{},"sourceType":"module"}